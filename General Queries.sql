--SHOWING ALL DATA FROM TABLE
SELECT * FROM CUSTOMERS;

--SHOWING COLUMN FROM A TABLE
SELECT NAME FROM CUSTOMERS;

--SHOW THE UNIQUE IDS OF CUSTOMERS WHO ORDERED
SELECT DISTINCT CID FROM ORDERS;

--SHOWING MULTIPLE COLUMNS FROM A TABLE
SELECT NAME, SALARY FROM EMPLOYEES;

--ALIASING COLUMN NAMES FROM TABLE
SELECT NAME AS CUSTOMER_NAME FROM CUSTOMERS;

--SELECT WITH WHERE
SELECT * FROM CUSTOMERS WHERE LOCATION = 'khulna';

--USING LIKE TO GET STRING MATCHING RESULTS
SELECT NAME FROM EMPLOYEES WHERE NAME LIKE '%n%';
SELECT NAME FROM EMPLOYEES WHERE NAME LIKE 'n%';
SELECT NAME FROM EMPLOYEES WHERE NAME LIKE '%n';

--SHOWING TABLE USING INCREASING OR DECREASING VALUES OF A COLUMN
SELECT * FROM EMPLOYEES ORDER BY SALARY; --INCREASING
SELECT * FROM EMPLOYEES ORDER BY SALARY DESC ; --DECREASING

--SELECT WITH AND, OR
SELECT * FROM CUSTOMERS WHERE LOCATION = 'khulna' AND NAME = 'mimi';
SELECT * FROM CUSTOMERS WHERE LOCATION = 'khulna' OR LOCATION = 'comilla';
SELECT * FROM CUSTOMERS WHERE LOCATION IN ('khulna','dhaka');
SELECT * FROM EMPLOYEES WHERE SALARY BETWEEN 50000 AND 80000;

--SELECT WITH OPERATORS
SELECT * FROM EMPLOYEES WHERE SALARY > 50000;
SELECT * FROM EMPLOYEES WHERE SALARY < 50000;
SELECT * FROM EMPLOYEES WHERE SALARY > 50000 AND SALARY < 60000;
SELECT * FROM EMPLOYEES WHERE SALARY >= 55000;
SELECT * FROM EMPLOYEES WHERE SALARY <= 60000;

--UPDATE ROW DATA
UPDATE EMPLOYEES SET CONTACT = 01911213423 WHERE ID = 5;

--UPDATE ROW DATA TYPE AND OTHER ATTRIBUTES

--CREATE A NEW COLUMN CALLED DUMMY ROW IN EMPLOYEE
ALTER TABLE EMPLOYEES ADD dummy varchar(100);
COMMIT ;
--ENTER DATA INTO THAT COLUMN
UPDATE EMPLOYEES SET dummy = 'scapegoat' WHERE ID = 0;
COMMIT ;
--CLEAR THE DATA IN THAT ROW FOR ALTERING THE DATATYPE OF THE COLUMN
UPDATE EMPLOYEES SET dummy = NULL WHERE ID = 0;
COMMIT ;
--CHANGE DATA TYPE OF 'DUMMY' COLUMN
ALTER TABLE EMPLOYEES MODIFY dummy  DATE;
--ADD DATA TO THE NEW COLUMN;
UPDATE EMPLOYEES SET dummy = TO_DATE('01/01/2018','dd/mm/yyyy') WHERE ID = 0;
COMMIT ;
--DELETE THE 'DUMMY' COLUMN
ALTER TABLE EMPLOYEES DROP COLUMN DUMMY;
COMMIT ;
--INSERT A DUMMY ENTRY INTO THE EMPLOYEE TO DELETE IT LATES
INSERT INTO EMPLOYEES (ID, NAME, LOCATION, CONTACT, POSITION, SALARY, COMMISSION) 
    VALUES (13, 'DUMMY', 'DUMMY', 01420420420, 'DUMMY', 42000, 0);
COMMIT ;
--DELETE THE FAKE ENTRY
DELETE FROM EMPLOYEES WHERE ID = 13;
COMMIT ;

--CONCAT
SELECT CONCAT('MY NAME IS ', CUSTOMERS.NAME) FROM CUSTOMERS;
--COUNT
SELECT COUNT(ID) FROM EMPLOYEES;

--SUM
SELECT SUM(SALARY) FROM EMPLOYEES;

--MAX/MIN
SELECT MAX(SALARY) FROM EMPLOYEES;
SELECT MIN(SALARY) FROM EMPLOYEES;

--AVG
SELECT AVG(SALARY) FROM EMPLOYEES;

--ROUND
SELECT ROUND( AVG(SALARY) ) FROM EMPLOYEES;
SELECT ROUND( AVG(SALARY), 3) FROM EMPLOYEES;

--GROUP BY
SELECT AVG(SALARY),LOCATION,COUNT(LOCATION) FROM EMPLOYEES GROUP BY LOCATION;

--HAVING
SELECT SUM(SALARY) FROM EMPLOYEES GROUP BY LOCATION HAVING SALARY > 50000;

--SUBQUERIES
SELECT * FROM CUSTOMERS WHERE ID IN (SELECT CID FROM ORDERS);
SELECT COUNT(*) FROM CUSTOMERS WHERE ID IN (SELECT CID FROM ORDERS);

--INNER JOIN
SELECT 
    CUSTOMERS.NAME 
,   ORDERS.ID 
FROM CUSTOMERS 
INNER JOIN ORDERS ON CUSTOMERS.ID = ORDERS.CID;

SELECT 
EMPLOYEES.NAME 
,   ORDERS.ID 
FROM EMPLOYEES 
INNER JOIN ORDERS ON EMPLOYEES.ID = ORDERS.EID;

--SHOWING CUSTOMERS WHO ORDERED AND THEIR RESPECTIVE EMPLOYEE IF
SELECT 
    CUSTOMERS.NAME AS CUSTOMER_NAME
,   EMPLOYEES.NAME AS EMPLOYEE_NAME 
FROM CUSTOMERS 
INNER JOIN ORDERS ON ORDERS.CID = CUSTOMERS.ID 
INNER JOIN EMPLOYEES ON EMPLOYEES.ID = ORDERS.EID;

SELECT 
    O.CID
,   C.NAME 
,   E.NAME 
FROM  
    ORDERS O
,   CUSTOMERS C
,   EMPLOYEES E 
WHERE O.CID = C.ID AND O.EID = E.ID;

--LEFT OUTER JOIN
--SHOWING EMPLOYEE TABLE TO SHOW WHICH EMPLOYEES HAVE ORDERS
SELECT 
    EMPLOYEES.NAME 
,   EMPLOYEES.CONTACT 
,   ORDERDETAILS.ORDERDATE
,   ORDERDETAILS.SHIPMENTDATE 
FROM EMPLOYEES 
LEFT OUTER JOIN ORDERDETAILS ON EMPLOYEES.ID = ORDERS.EID;

--RIGHT OUTER JOIN
--SHOWING CUSTOMERS WHO ORDERED WITH THEIR ORDER DETAILS AND THEIR ASSIGNED EMPLOYEE DETAILS
SELECT
    CUSTOMERS.NAME AS CUSTOMER_NAME 
,   CUSTOMERS.CONTACT AS CUSTOMER_CONTACT 
,   CUSTOMERS.LOCATION AS CUSTOMER_LOCATION 
,   EMPLOYEES.NAME AS EMPLOYEE_NAME
,   EMPLOYEES.CONTACT AS EMPLOYEE_CONTACT 
,   ORDERDETAILS.ORDERDATE
,   ORDERDETAILS.SHIPMENTDATE
,   ORDERS.QUANTITY
,   ORDERS.TOTALPRICE
FROM
CUSTOMERS
RIGHT OUTER JOIN ORDERS ON CUSTOMERS.ID = ORDERS.CID
RIGHT OUTER JOIN EMPLOYEES ON ORDERS.EID = EMPLOYEES.ID
RIGHT OUTER JOIN ORDERDETAILS ON ORDERS.ID = ORDERDETAILS.ID;

--DIFF BETWEEN RIGHT AND LEFT
--IN LEFT MODE, THE CREATED VIEW WILL HAVE AS MANY ROWS AS THE LEFTMOST TABLE
--IN RIGHT MODE, THE CREATED VIEW WILL HAVE AS MANY ROWS AS THE RIGHTMOST TABLE
SELECT
  CUSTOMERS.NAME AS CUSTOMER_NAME 
,   CUSTOMERS.CONTACT AS CUSTOMER_CONTACT 
,   EMPLOYEES.NAME AS EMPLOYEE_NAME
,   EMPLOYEES.CONTACT AS EMPLOYEE_CONTACT 
,   ORDERS.DELIVERY_LOCATION
,   ORDERS.ORDER_DATE
,   ORDERS.RECEIVED_DATE
,   ORDERS.QUANTITY_ORDERED
,   ORDERDETAILS.TOTAL_PRICE
FROM
CUSTOMERS
LEFT OUTER JOIN ORDERS ON CUSTOMERS.ID = ORDERS.CID
LEFT OUTER JOIN EMPLOYEES ON ORDERS.EID = EMPLOYEES.ID
LEFT OUTER JOIN ORDERDETAILS ON ORDERS.ID = ORDERDETAILS.ID;